import os

#===============================================================================
# 
#===============================================================================

vars = Variables(None)

vars.Add('M32', 'true if this is a 32 bit install', False)
vars.Add('F95', 'fortran 95 compiler')

CPPDEFINES = [('PROJECT_NAME', '\\\'$PROJECT_NAME\\\''), ('CASE_NAME', '\\\'$PROJECT_NAME\\\''), ('ARG_INT1', 'intmin'), ('ARG_INT2', 'intrun'),
               'timestep', 'textwrite', 'zvec1D', '$PROJECT_NAME']

F95FLAGS = ['$_M32', '$_CPPDEFFLAGS', '-fno-underscoring', '-x', 'f95-cpp-input', '-fconvert=big-endian', '-gdwarf-2', '-fbounds-check', '-O0', '-g3', '-J', Dir('.')]

#===============================================================================
# 
#===============================================================================
import numpy

CPPPATH = [numpy.get_include(), 'ext'] 
env = Environment(tools=['default', 'distutils', 'cython'], variables=vars, _M32='${"-m32" if M32 else ""}')
env.AppendUnique(CPPPATH=CPPPATH, CFLAGS=['-O0', '-g3', '$_M32', ], LDMODULEFLAGS=['$_M32'])

#===============================================================================
# 
#===============================================================================
fortran_env = Environment(ENV={'PATH':os.environ['PATH']}, variables=vars, _M32='${"-m32" if M32 else ""}')
print 
print fortran_env['F95COM']
print 

fortran_env.AppendUnique(PROJECT_NAME='tes', CPPDEFINES=CPPDEFINES, F95FLAGS=F95FLAGS)
f95_src = Glob('src/*.f95')

fortran_env.Command(['fhelper.f95', 'cheader.h', 'helper.pxd', '_tracmass.pyx'], ['simple_wrap.py', 'ext/pyx_tail.pyx', f95_src],
                    './$SOURCE --pointer-size=${"4" if M32 else "8"} ${SOURCES[2:]} -f ${TARGETS[0]} -c ${TARGETS[1]} --pxd ${TARGETS[2]} --pyx ${TARGETS[3]} --pyx-tail  ${SOURCES[1]}  ${_CPPDEFFLAGS} --ignore-module mod_stat')

pyx_helper = env.Cython('_tracmass.pyx')
Depends(pyx_helper, ['helper.pxd', 'ftracmass.pxd'])


pyx_helper_c = env.SharedObject(pyx_helper)
f_helper = fortran_env.SharedObject('fhelper.f95')
f_tm = fortran_env.SharedObject('ext/ftracmass.f95')


tes_readfield = fortran_env.SharedObject('projects/tes/tes_readfield.f95')

objects_modules = fortran_env.SharedObject(f95_src)

Depends(f_tm, [objects_modules])
Depends(tes_readfield, [objects_modules])
Depends('src/loop.os', ['mod_pos.mod'])
Depends('src/loop_pos.os', ['mod_psi.mod'])
Depends('src/coord.os', ['mod_param.mod'])
Depends('src/init_par.os', ['mod_seed.mod'])

objects = [obj for obj in objects_modules if obj.suffix == '.os']
modules = [obj for obj in objects_modules if obj.suffix == '.mod']

#===============================================================================
# 
#===============================================================================

env.LoadableModule('_tracmass.so', [f_helper, objects, tes_readfield, pyx_helper_c, f_tm])




